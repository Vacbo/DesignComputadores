tmp(0) := x"04" & '0' & x"00"; --  Carrega 0 acc                                    
tmp(1) := x"05" & '1' & x"00"; --  Apaga LEDRs
tmp(2) := x"05" & '1' & x"01"; 
tmp(3) := x"05" & '1' & x"02"; 
tmp(4) := x"05" & '1' & x"20"; --  Apaga HEXs
tmp(5) := x"05" & '1' & x"21"; 
tmp(6) := x"05" & '1' & x"22"; 
tmp(7) := x"05" & '1' & x"23"; 
tmp(8) := x"05" & '1' & x"24"; 
tmp(9) := x"05" & '1' & x"25"; 
tmp(10) := x"05" & '0' & x"00"; -- Zera unidades
tmp(11) := x"05" & '0' & x"01"; -- Zera dezenas
tmp(12) := x"05" & '0' & x"02"; -- Zera centenas
tmp(13) := x"05" & '0' & x"03"; -- Zera milhares
tmp(14) := x"05" & '0' & x"04"; -- Zera dezenas de milhares
tmp(15) := x"05" & '0' & x"05"; -- Zera centenas de milhares
tmp(16) := x"05" & '0' & x"0C"; -- Carrega 0 para comparacao
tmp(17) := x"05" & '0' & x"0F"; -- Inibe contagem
tmp(18) := x"04" & '0' & x"09"; --  Carrega 9 acc
tmp(19) := x"05" & '0' & x"06"; --  Carrega 9 no limite unidades
tmp(20) := x"05" & '0' & x"07"; --  Carrega 9 no limite dezenas
tmp(21) := x"05" & '0' & x"08"; --  Carrega 9 no limite centenas
tmp(22) := x"05" & '0' & x"09"; --  Carrega 9 no limite milhares
tmp(23) := x"05" & '0' & x"0A"; --  Carrega 9 no limite dezenas de milhares
tmp(24) := x"05" & '0' & x"0B"; --  Carrega 9 no limite centenas de milhares
tmp(25) := x"04" & '0' & x"01"; --  Carrega 1 acc
tmp(26) := x"05" & '0' & x"0D"; --  Carrega 1 para comparacao
tmp(27) := x"04" & '0' & x"0A"; --  Carrega 10 acc
tmp(28) := x"05" & '0' & x"0E"; --  Carrega 10 para comparacao                      
tmp(29) := x"01" & '1' & x"60"; -- Le Key 0                                        
tmp(30) := x"0B" & '0' & x"0D"; -- Mascara apenas o bit 1
tmp(31) := x"08" & '0' & x"0D"; -- Verifica se é 1
tmp(32) := x"07" & '0' & x"23"; -- Se for 1, vai para subrotina
tmp(33) := x"06" & '0' & x"24"; -- Se não for 1, segue o programa
tmp(34) := x"09" & '0' & x"34"; -- Subrotina incrementa
tmp(35) := x"09" & '0' & x"66"; -- Subrotina atualiza HEX
tmp(36) := x"01" & '1' & x"61"; -- Le Key 1
tmp(37) := x"0B" & '0' & x"0D"; -- Mascara apenas o bit 1
tmp(38) := x"08" & '0' & x"0D"; -- Verifica se é 1
tmp(39) := x"07" & '0' & x"2A"; -- Se for 1, vai para subrotina
tmp(40) := x"06" & '0' & x"2B"; -- Se não for 1, segue o programa
tmp(41) := x"09" & '0' & x"74"; -- Subrotina config limit
tmp(42) := x"09" & '0' & x"97"; -- Subrotina check limit
tmp(43) := x"01" & '1' & x"64"; -- Le RESET KEY
tmp(44) := x"0B" & '0' & x"0D"; -- Mascara apenas o bit 1
tmp(45) := x"08" & '0' & x"0D"; -- Verifica se é 1
tmp(46) := x"07" & '0' & x"31"; -- Se for 1, vai para subrotina
tmp(47) := x"06" & '0' & x"1E"; -- Se não for 1, retorna ao inicio
tmp(48) := x"09" & '0' & x"B5"; -- Subrotina reset
tmp(49) := x"06" & '0' & x"1E"; -- Retorna ao inicio                              
tmp(50) := x"00" & '0' & x"00"; 
tmp(51) := x"05" & '1' & x"FF"; -- Reseta Key 0                          
tmp(52) := x"01" & '0' & x"0F"; -- Carrega contagem inibida
tmp(53) := x"08" & '0' & x"0C"; -- Verifica se é 0
tmp(54) := x"07" & '0' & x"39"; -- Se for 0, continua
tmp(55) := x"0A" & '0' & x"00"; -- Se for 1, retorna
tmp(56) := x"01" & '0' & x"00"; -- Le valor unidade
tmp(57) := x"02" & '0' & x"0D"; -- Incrementa unidade
tmp(58) := x"08" & '0' & x"0E"; --  Verifica se é 10
tmp(59) := x"07" & '0' & x"3E"; -- Se for 10, lidar com carry
tmp(60) := x"0A" & '0' & x"00"; 
tmp(61) := x"04" & '0' & x"00"; -- Carrega 0
tmp(62) := x"05" & '0' & x"00"; -- Zera unidade
tmp(63) := x"01" & '0' & x"01"; -- Le valor dezena
tmp(64) := x"02" & '0' & x"0D"; -- Incrementa dezena
tmp(65) := x"08" & '0' & x"0E"; --  Verifica se é 10
tmp(66) := x"07" & '0' & x"45"; -- Se for 10, lidar com carry
tmp(67) := x"0A" & '0' & x"00"; 
tmp(68) := x"04" & '0' & x"00"; -- Carrega 0
tmp(69) := x"05" & '0' & x"01"; -- Zera dezena
tmp(70) := x"01" & '0' & x"02"; -- Le valor centena
tmp(71) := x"02" & '0' & x"0D"; -- Incrementa centena
tmp(72) := x"08" & '0' & x"0E"; --  Verifica se é 10
tmp(73) := x"07" & '0' & x"4C"; -- Se for 10, lidar com carry
tmp(74) := x"0A" & '0' & x"00"; 
tmp(75) := x"04" & '0' & x"00"; -- Carrega 0
tmp(76) := x"05" & '0' & x"02"; -- Zera centena
tmp(77) := x"01" & '0' & x"03"; -- Le valor milhar
tmp(78) := x"02" & '0' & x"0D"; -- Incrementa milhar
tmp(79) := x"08" & '0' & x"0E"; --  Verifica se é 10
tmp(80) := x"07" & '0' & x"53"; -- Se for 10, lidar com carry
tmp(81) := x"0A" & '0' & x"00"; 
tmp(82) := x"04" & '0' & x"00"; -- Carrega 0
tmp(83) := x"05" & '0' & x"03"; -- Zera milhar
tmp(84) := x"01" & '0' & x"04"; -- Le valor dezena de milhar
tmp(85) := x"02" & '0' & x"0D"; -- Incrementa dezena de milhar
tmp(86) := x"08" & '0' & x"0E"; --  Verifica se é 10
tmp(87) := x"07" & '0' & x"5A"; -- Se for 10, lidar com carry
tmp(88) := x"0A" & '0' & x"00"; 
tmp(89) := x"04" & '0' & x"00"; -- Carrega 0
tmp(90) := x"05" & '0' & x"04"; -- Zera dezena de milhar
tmp(91) := x"01" & '0' & x"05"; -- Le valor centena de milhar
tmp(92) := x"02" & '0' & x"0D"; -- Incrementa centena de milhar
tmp(93) := x"08" & '0' & x"0E"; --  Verifica se é 10
tmp(94) := x"07" & '0' & x"61"; -- Se for 10, lidar com carry
tmp(95) := x"0A" & '0' & x"00"; 
tmp(96) := x"04" & '0' & x"01"; -- Carrega 1
tmp(97) := x"05" & '1' & x"02"; -- Ascende LED Overflow
tmp(98) := x"05" & '0' & x"0F"; -- Inibe contagem
tmp(99) := x"0A" & '0' & x"00"; -- END INCREMENTA HEX SUBROTINA
tmp(100) := x"00" & '0' & x"00"; 
tmp(101) := x"01" & '0' & x"00"; -- Le valor unidade                        
tmp(102) := x"05" & '1' & x"20"; --  Escreve valor unidade
tmp(103) := x"01" & '0' & x"01"; -- Le valor dezena
tmp(104) := x"05" & '1' & x"21"; -- Escreve valor dezena
tmp(105) := x"01" & '0' & x"02"; -- Le valor centena
tmp(106) := x"05" & '1' & x"22"; -- Escreve valor centena
tmp(107) := x"01" & '0' & x"03"; -- Le valor milhar
tmp(108) := x"05" & '1' & x"23"; -- Escreve valor milhar
tmp(109) := x"01" & '0' & x"04"; -- Le valor dezena de milhar
tmp(110) := x"05" & '1' & x"24"; -- Escreve valor dezena de milhar
tmp(111) := x"01" & '0' & x"05"; -- Le valor centena de milhar
tmp(112) := x"05" & '1' & x"25"; -- Escreve valor centena de milhar
tmp(113) := x"0A" & '0' & x"00"; -- END ATUALIZA HEX SUBROTINA
tmp(114) := x"00" & '0' & x"00"; 
tmp(115) := x"05" & '1' & x"FE"; -- Reseta Key 1                          
tmp(116) := x"01" & '1' & x"40"; -- Le SW 0~7
tmp(117) := x"05" & '0' & x"06"; -- Carrega valor SW 0~7 para limite unidade
tmp(118) := x"01" & '1' & x"61"; -- Le Key 1
tmp(119) := x"08" & '0' & x"0C"; -- Verifica se é 0
tmp(120) := x"07" & '0' & x"77"; -- Se for 0, espera ser 1
tmp(121) := x"05" & '1' & x"FE"; -- Reseta Key 1
tmp(122) := x"01" & '1' & x"40"; -- Le SW 0~7
tmp(123) := x"05" & '0' & x"07"; -- Carrega valor SW 0~7 para limite dezena
tmp(124) := x"01" & '1' & x"61"; -- Le Key 1
tmp(125) := x"08" & '0' & x"0C"; -- Verifica se é 0
tmp(126) := x"07" & '0' & x"7D"; -- Se for 0, espera ser 1
tmp(127) := x"05" & '1' & x"FE"; -- Reseta Key 1
tmp(128) := x"01" & '1' & x"40"; -- Le SW 0~7
tmp(129) := x"05" & '0' & x"08"; -- Carrega valor SW 0~7 para limite centena
tmp(130) := x"01" & '1' & x"61"; -- Le Key 1
tmp(131) := x"08" & '0' & x"0C"; -- Verifica se é 0
tmp(132) := x"07" & '0' & x"83"; -- Se for 0, espera ser 1
tmp(133) := x"05" & '1' & x"FE"; -- Reseta Key 1
tmp(134) := x"01" & '1' & x"40"; -- Le SW 0~7
tmp(135) := x"05" & '0' & x"09"; -- Carrega valor SW 0~7 para limite milhar
tmp(136) := x"01" & '1' & x"61"; -- Le Key 1
tmp(137) := x"08" & '0' & x"0C"; -- Verifica se é 0
tmp(138) := x"07" & '0' & x"89"; -- Se for 0, espera ser 1
tmp(139) := x"05" & '1' & x"FE"; -- Reseta Key 1
tmp(140) := x"01" & '1' & x"40"; -- Le SW 0~7
tmp(141) := x"05" & '0' & x"0A"; -- Carrega valor SW 0~7 para limite dezena de milhar
tmp(142) := x"01" & '1' & x"61"; -- Le Key 1
tmp(143) := x"08" & '0' & x"0C"; -- Verifica se é 0
tmp(144) := x"07" & '0' & x"8F"; -- Se for 0, espera ser 1
tmp(145) := x"05" & '1' & x"FE"; -- Reseta Key 1
tmp(146) := x"01" & '1' & x"40"; -- Le SW 0~7
tmp(147) := x"05" & '0' & x"0B"; -- Carrega valor SW 0~7 para limite centena de milhar
tmp(148) := x"0A" & '0' & x"00"; -- END CONFIG LIMIT SUBROTINA
tmp(149) := x"00" & '0' & x"00"; 
tmp(150) := x"01" & '0' & x"00"; -- Le valor unidade                       
tmp(151) := x"08" & '0' & x"06"; -- Verifica se é limite
tmp(152) := x"07" & '0' & x"9B"; -- Se for limite continua o programa
tmp(153) := x"0A" & '0' & x"00"; -- Se nao for limite, retorna
tmp(154) := x"01" & '0' & x"01"; -- Le valor dezena
tmp(155) := x"08" & '0' & x"07"; -- Verifica se é limite
tmp(156) := x"07" & '0' & x"9F"; -- Se for limite continua o programa
tmp(157) := x"0A" & '0' & x"00"; -- Se nao for limite, retorna
tmp(158) := x"01" & '0' & x"02"; -- Le valor centena
tmp(159) := x"08" & '0' & x"08"; -- Verifica se é limite
tmp(160) := x"07" & '0' & x"A3"; -- Se for limite continua o programa
tmp(161) := x"0A" & '0' & x"00"; -- Se nao for limite, retorna
tmp(162) := x"01" & '0' & x"03"; -- Le valor milhar
tmp(163) := x"08" & '0' & x"09"; -- Verifica se é limite
tmp(164) := x"07" & '0' & x"A7"; -- Se for limite continua o programa
tmp(165) := x"0A" & '0' & x"00"; -- Se nao for limite, retorna
tmp(166) := x"01" & '0' & x"04"; -- Le valor dezena de milhar
tmp(167) := x"08" & '0' & x"0A"; -- Verifica se é limite
tmp(168) := x"07" & '0' & x"AB"; -- Se for limite continua o programa
tmp(169) := x"0A" & '0' & x"00"; -- Se nao for limite, retorna
tmp(170) := x"01" & '0' & x"05"; -- Le valor centena de milhar
tmp(171) := x"08" & '0' & x"0B"; -- Verifica se é limite
tmp(172) := x"07" & '0' & x"AF"; -- Se for limite aciona limite atingido
tmp(173) := x"0A" & '0' & x"00"; -- Se nao for limite, retorna
tmp(174) := x"04" & '0' & x"01"; -- Carrega 1
tmp(175) := x"05" & '0' & x"0F"; -- Inibe contagem
tmp(176) := x"04" & '0' & x"0F"; -- Carrega 15
tmp(177) := x"05" & '1' & x"00"; -- Ascende LED Limite atingido
tmp(178) := x"0A" & '0' & x"00"; -- END CHECK LIMIT SUBROTINA
tmp(179) := x"00" & '0' & x"00"; 
tmp(180) := x"05" & '1' & x"FD"; -- Reseta RESET KEY                     
tmp(181) := x"04" & '0' & x"00"; -- Carrega 0
tmp(182) := x"05" & '0' & x"00"; -- Zera unidade
tmp(183) := x"05" & '0' & x"01"; -- Zera dezena
tmp(184) := x"05" & '0' & x"02"; -- Zera centena
tmp(185) := x"05" & '0' & x"03"; -- Zera milhar
tmp(186) := x"05" & '0' & x"04"; -- Zera dezena de milhar
tmp(187) := x"05" & '0' & x"05"; -- Zera centena de milhar
tmp(188) := x"05" & '0' & x"0F"; -- Ativa contagem
tmp(189) := x"05" & '1' & x"02"; -- Apaga LED Overflow
tmp(190) := x"04" & '0' & x"0F"; -- Carrega 15
tmp(191) := x"05" & '1' & x"00"; -- Apaga LED Limite atingido
tmp(192) := x"0A" & '0' & x"00"; -- END RESET SUBROTINA
