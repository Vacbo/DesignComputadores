tmp(0) := x"04" & '0' & x"00"; --  Carrega 0 acc                                    
tmp(1) := x"05" & '1' & x"00"; --  Apaga LEDRs
tmp(2) := x"05" & '1' & x"01"; 
tmp(3) := x"05" & '1' & x"02"; 
tmp(4) := x"05" & '1' & x"20"; --  Apaga HEXs
tmp(5) := x"05" & '1' & x"21"; 
tmp(6) := x"05" & '1' & x"22"; 
tmp(7) := x"05" & '1' & x"23"; 
tmp(8) := x"05" & '1' & x"24"; 
tmp(9) := x"05" & '1' & x"25"; 
tmp(10) := x"05" & '0' & x"00"; -- Zera unidades
tmp(11) := x"05" & '0' & x"01"; -- Zera dezenas
tmp(12) := x"05" & '0' & x"02"; -- Zera centenas
tmp(13) := x"05" & '0' & x"03"; -- Zera milhares
tmp(14) := x"05" & '0' & x"04"; -- Zera dezenas de milhares
tmp(15) := x"05" & '0' & x"05"; -- Zera centenas de milhares
tmp(16) := x"05" & '0' & x"0C"; -- Carrega 0 para comparacao
tmp(17) := x"05" & '0' & x"0F"; -- Inibe contagem
tmp(18) := x"04" & '0' & x"09"; --  Carrega 9 acc
tmp(19) := x"05" & '0' & x"06"; --  Carrega 9 no limite unidades
tmp(20) := x"05" & '0' & x"07"; --  Carrega 9 no limite dezenas
tmp(21) := x"05" & '0' & x"08"; --  Carrega 9 no limite centenas
tmp(22) := x"05" & '0' & x"09"; --  Carrega 9 no limite milhares
tmp(23) := x"05" & '0' & x"0A"; --  Carrega 9 no limite dezenas de milhares
tmp(24) := x"05" & '0' & x"0B"; --  Carrega 9 no limite centenas de milhares
tmp(25) := x"04" & '0' & x"01"; --  Carrega 1 acc
tmp(26) := x"05" & '0' & x"0D"; --  Carrega 1 para comparacao
tmp(27) := x"04" & '0' & x"0A"; --  Carrega 10 acc
tmp(28) := x"05" & '0' & x"0E"; --  Carrega 10 para comparacao                      
tmp(29) := x"01" & '1' & x"60"; -- Le Key 0                                        
tmp(30) := x"0B" & '0' & x"0D"; -- Mascara apenas o bit 1
tmp(31) := x"08" & '0' & x"0D"; -- Verifica se é 1
tmp(32) := x"07" & '0' & x"23"; -- Se for 1, vai para subrotina
tmp(33) := x"06" & '0' & x"24"; -- Se não for 1, segue o programa
tmp(34) := x"09" & '0' & x"34"; -- Subrotina incrementa
tmp(35) := x"09" & '0' & x"66"; -- Subrotina atualiza HEX
tmp(36) := x"01" & '1' & x"61"; -- Le Key 1
tmp(37) := x"0B" & '0' & x"0D"; -- Mascara apenas o bit 1
tmp(38) := x"08" & '0' & x"0D"; -- Verifica se é 1
tmp(39) := x"07" & '0' & x"2A"; -- Se for 1, vai para subrotina
tmp(40) := x"06" & '0' & x"2B"; -- Se não for 1, segue o programa
tmp(41) := x"09" & '0' & x"74"; -- Subrotina config limit
tmp(42) := x"09" & '0' & x"97"; -- Subrotina check limit
tmp(43) := x"01" & '1' & x"64"; -- Le RESET KEY
tmp(44) := x"0B" & '0' & x"0D"; -- Mascara apenas o bit 1
tmp(45) := x"08" & '0' & x"0D"; -- Verifica se é 1
tmp(46) := x"07" & '0' & x"31"; -- Se for 1, vai para subrotina
tmp(47) := x"06" & '0' & x"1E"; -- Se não for 1, retorna ao inicio
tmp(48) := x"09" & '0' & x"B5"; -- Subrotina reset
tmp(49) := x"06" & '0' & x"1E"; -- Retorna ao inicio                              
