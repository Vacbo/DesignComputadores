tmp(0) := x"4" & '0' & x"00";	-- LDI $0 	# Carrega 0 acc                                    
tmp(1) := x"5" & '1' & x"00";	-- STA @256 	# Apaga LEDRs
tmp(2) := x"5" & '1' & x"01";	-- STA @257
tmp(3) := x"5" & '1' & x"02";	-- STA @258
tmp(4) := x"5" & '1' & x"20";	-- STA @288 	# Apaga HEXs
tmp(5) := x"5" & '1' & x"21";	-- STA @289
tmp(6) := x"5" & '1' & x"22";	-- STA @290
tmp(7) := x"5" & '1' & x"23";	-- STA @291
tmp(8) := x"5" & '1' & x"24";	-- STA @292
tmp(9) := x"5" & '1' & x"25";	-- STA @293
tmp(10) := x"5" & '0' & x"00";	-- STA @0 	#Zera unidades
tmp(11) := x"5" & '0' & x"01";	-- STA @1 	#Zera dezenas
tmp(12) := x"5" & '0' & x"02";	-- STA @2 	#Zera centenas
tmp(13) := x"5" & '0' & x"03";	-- STA @3 	#Zera milhares
tmp(14) := x"5" & '0' & x"04";	-- STA @4 	#Zera dezenas de milhares
tmp(15) := x"5" & '0' & x"05";	-- STA @5 	#Zera centenas de milhares
tmp(16) := x"5" & '0' & x"0C";	-- STA @12 	#Carrega 0 para comparacao
tmp(17) := x"5" & '0' & x"0F";	-- STA @15 	#Inibe contagem
tmp(18) := x"4" & '0' & x"09";	-- LDI $9 	# Carrega 9 acc
tmp(19) := x"5" & '0' & x"06";	-- STA @6 	# Carrega 9 no limite unidades
tmp(20) := x"5" & '0' & x"07";	-- STA @7 	# Carrega 9 no limite dezenas
tmp(21) := x"5" & '0' & x"08";	-- STA @8 	# Carrega 9 no limite centenas
tmp(22) := x"5" & '0' & x"09";	-- STA @9 	# Carrega 9 no limite milhares
tmp(23) := x"5" & '0' & x"0A";	-- STA @10 	# Carrega 9 no limite dezenas de milhares
tmp(24) := x"5" & '0' & x"0B";	-- STA @11 	# Carrega 9 no limite centenas de milhares
tmp(25) := x"4" & '0' & x"01";	-- LDI $1 	# Carrega 1 acc
tmp(26) := x"5" & '0' & x"0D";	-- STA @13 	# Carrega 1 para comparacao                       
tmp(27) := x"4" & '0' & x"0A";	-- LDI $10 	# Carrega 10 acc
tmp(28) := x"5" & '0' & x"0E";	-- STA @14 	# Carrega 10 para comparacao                      
tmp(29) := x"1" & '1' & x"60";	-- LDA @352 	#Le Key 0                                        
tmp(30) := x"B" & '0' & x"0D";	-- AND @13 	#Mascara apenas o bit 1
tmp(31) := x"8" & '0' & x"0D";	-- CEQ @13 	#Verifica se é 1
tmp(32) := x"7" & '0' & x"23";	-- JEQ @35 	#Se for 1, vai para subrotina
tmp(33) := x"6" & '0' & x"24";	-- JMP @36 	#Se não for 1, segue o programa
tmp(34) := x"9" & '0' & x"34";	-- JSR @52 	#Subrotina incrementa
tmp(35) := x"9" & '0' & x"66";	-- JSR @102 	#Subrotina atualiza HEX
tmp(36) := x"1" & '1' & x"61";	-- LDA @353 	#Le Key 1
tmp(37) := x"B" & '0' & x"0D";	-- AND @13 	#Mascara apenas o bit 1
tmp(38) := x"8" & '0' & x"0D";	-- CEQ @13 	#Verifica se é 1
tmp(39) := x"7" & '0' & x"2A";	-- JEQ @42 	#Se for 1, vai para subrotina
tmp(40) := x"6" & '0' & x"2B";	-- JMP @43 	#Se não for 1, segue o programa
tmp(41) := x"9" & '0' & x"74";	-- JSR @116 	#Subrotina config limit
tmp(42) := x"9" & '0' & x"97";	-- JSR @151 	#Subrotina check limit
tmp(43) := x"1" & '1' & x"64";	-- LDA @356 	#Le RESET KEY
tmp(44) := x"B" & '0' & x"0D";	-- AND @13 	#Mascara apenas o bit 1
tmp(45) := x"8" & '0' & x"0D";	-- CEQ @13 	#Verifica se é 1
tmp(46) := x"7" & '0' & x"31";	-- JEQ @49 	#Se for 1, vai para subrotina
tmp(47) := x"6" & '0' & x"1E";	-- JMP @30 	#Se não for 1, retorna ao inicio 
tmp(48) := x"9" & '0' & x"B5";	-- JSR @181 	#Subrotina reset
tmp(49) := x"6" & '0' & x"1E";	-- JMP @30 	#Retorna ao inicio                              
tmp(50) := x"0" & '0' & x"00";	-- NOP
tmp(51) := x"5" & '1' & x"FF";	-- STA @511 	#Reseta Key 0                          
tmp(52) := x"1" & '0' & x"0F";	-- LDA @15 	#Carrega contagem inibida
tmp(53) := x"8" & '0' & x"0C";	-- CEQ @12 	#Verifica se é 0
tmp(54) := x"7" & '0' & x"39";	-- JEQ @57 	#Se for 0, continua
tmp(55) := x"A" & '0' & x"00";	-- RET 	#Se for 1, retorna
tmp(56) := x"1" & '0' & x"00";	-- LDA @0 	#Le valor unidade
tmp(57) := x"2" & '0' & x"0D";	-- SOMA @13 	#Incrementa unidade
tmp(58) := x"8" & '0' & x"0E";	-- CEQ @14 	# Verifica se é 10
tmp(59) := x"7" & '0' & x"3E";	-- JEQ @62 	#Se for 10, lidar com carry
tmp(60) := x"A" & '0' & x"00";	-- RET
tmp(61) := x"4" & '0' & x"00";	-- LDI $0 	#Carrega 0
tmp(62) := x"5" & '0' & x"00";	-- STA @0 	#Zera unidade
tmp(63) := x"1" & '0' & x"01";	-- LDA @1 	#Le valor dezena
tmp(64) := x"2" & '0' & x"0D";	-- SOMA @13 	#Incrementa dezena
tmp(65) := x"8" & '0' & x"0E";	-- CEQ @14 	# Verifica se é 10
tmp(66) := x"7" & '0' & x"45";	-- JEQ @69 	#Se for 10, lidar com carry
tmp(67) := x"A" & '0' & x"00";	-- RET
tmp(68) := x"4" & '0' & x"00";	-- LDI $0 	#Carrega 0
tmp(69) := x"5" & '0' & x"01";	-- STA @1 	#Zera dezena
tmp(70) := x"1" & '0' & x"02";	-- LDA @2 	#Le valor centena
tmp(71) := x"2" & '0' & x"0D";	-- SOMA @13 	#Incrementa centena
tmp(72) := x"8" & '0' & x"0E";	-- CEQ @14 	# Verifica se é 10
tmp(73) := x"7" & '0' & x"4C";	-- JEQ @76 	#Se for 10, lidar com carry
tmp(74) := x"A" & '0' & x"00";	-- RET
tmp(75) := x"4" & '0' & x"00";	-- LDI $0 	#Carrega 0
tmp(76) := x"5" & '0' & x"02";	-- STA @2 	#Zera centena
tmp(77) := x"1" & '0' & x"03";	-- LDA @3 	#Le valor milhar
tmp(78) := x"2" & '0' & x"0D";	-- SOMA @13 	#Incrementa milhar
tmp(79) := x"8" & '0' & x"0E";	-- CEQ @14 	# Verifica se é 10
tmp(80) := x"7" & '0' & x"53";	-- JEQ @83 	#Se for 10, lidar com carry
tmp(81) := x"A" & '0' & x"00";	-- RET
tmp(82) := x"4" & '0' & x"00";	-- LDI $0 	#Carrega 0
tmp(83) := x"5" & '0' & x"03";	-- STA @3 	#Zera milhar
tmp(84) := x"1" & '0' & x"04";	-- LDA @4 	#Le valor dezena de milhar
tmp(85) := x"2" & '0' & x"0D";	-- SOMA @13 	#Incrementa dezena de milhar
tmp(86) := x"8" & '0' & x"0E";	-- CEQ @14 	# Verifica se é 10
tmp(87) := x"7" & '0' & x"5A";	-- JEQ @90 	#Se for 10, lidar com carry
tmp(88) := x"A" & '0' & x"00";	-- RET
tmp(89) := x"4" & '0' & x"00";	-- LDI $0 	#Carrega 0
tmp(90) := x"5" & '0' & x"04";	-- STA @4 	#Zera dezena de milhar
tmp(91) := x"1" & '0' & x"05";	-- LDA @5 	#Le valor centena de milhar
tmp(92) := x"2" & '0' & x"0D";	-- SOMA @13 	#Incrementa centena de milhar
tmp(93) := x"8" & '0' & x"0E";	-- CEQ @14 	# Verifica se é 10
tmp(94) := x"7" & '0' & x"61";	-- JEQ @97 	#Se for 10, lidar com carry
tmp(95) := x"A" & '0' & x"00";	-- RET
tmp(96) := x"4" & '0' & x"01";	-- LDI $1 	#Carrega 1
tmp(97) := x"5" & '1' & x"02";	-- STA @258 	#Ascende LED Overflow
tmp(98) := x"5" & '0' & x"0F";	-- STA @15 	#Inibe contagem
tmp(99) := x"A" & '0' & x"00";	-- RET                                             	#END INCREMENTA HEX SUBROTINA
tmp(100) := x"0" & '0' & x"00";	-- NOP
tmp(101) := x"1" & '0' & x"00";	-- LDA @0 	#Le valor unidade                        
tmp(102) := x"5" & '1' & x"20";	-- STA @288 	# Escreve valor unidade
tmp(103) := x"1" & '0' & x"01";	-- LDA @1 	#Le valor dezena
tmp(104) := x"5" & '1' & x"21";	-- STA @289 	#Escreve valor dezena
tmp(105) := x"1" & '0' & x"02";	-- LDA @2 	#Le valor centena
tmp(106) := x"5" & '1' & x"22";	-- STA @290 	#Escreve valor centena
tmp(107) := x"1" & '0' & x"03";	-- LDA @3 	#Le valor milhar
tmp(108) := x"5" & '1' & x"23";	-- STA @291 	#Escreve valor milhar
tmp(109) := x"1" & '0' & x"04";	-- LDA @4 	#Le valor dezena de milhar
tmp(110) := x"5" & '1' & x"24";	-- STA @292 	#Escreve valor dezena de milhar
tmp(111) := x"1" & '0' & x"05";	-- LDA @5 	#Le valor centena de milhar
tmp(112) := x"5" & '1' & x"25";	-- STA @293  	#Escreve valor centena de milhar
tmp(113) := x"A" & '0' & x"00";	-- RET                                             	#END ATUALIZA HEX SUBROTINA
tmp(114) := x"0" & '0' & x"00";	-- NOP
tmp(115) := x"5" & '1' & x"FE";	-- STA @510 	#Reseta Key 1                          
tmp(116) := x"1" & '1' & x"40";	-- LDA @320 	#Le SW 0~7
tmp(117) := x"5" & '0' & x"06";	-- STA @6 	#Carrega valor SW 0~7 para limite unidade
tmp(118) := x"1" & '1' & x"61";	-- LDA @353 	#Le Key 1
tmp(119) := x"8" & '0' & x"0C";	-- CEQ @12 	#Verifica se é 0
tmp(120) := x"7" & '0' & x"77";	-- JEQ @119 	#Se for 0, espera ser 1
tmp(121) := x"5" & '1' & x"FE";	-- STA @510 	#Reseta Key 1
tmp(122) := x"1" & '1' & x"40";	-- LDA @320 	#Le SW 0~7
tmp(123) := x"5" & '0' & x"07";	-- STA @7 	#Carrega valor SW 0~7 para limite dezena
tmp(124) := x"1" & '1' & x"61";	-- LDA @353 	#Le Key 1
tmp(125) := x"8" & '0' & x"0C";	-- CEQ @12 	#Verifica se é 0
tmp(126) := x"7" & '0' & x"7D";	-- JEQ @125 	#Se for 0, espera ser 1
tmp(127) := x"5" & '1' & x"FE";	-- STA @510 	#Reseta Key 1
tmp(128) := x"1" & '1' & x"40";	-- LDA @320 	#Le SW 0~7
tmp(129) := x"5" & '0' & x"08";	-- STA @8 	#Carrega valor SW 0~7 para limite centena
tmp(130) := x"1" & '1' & x"61";	-- LDA @353 	#Le Key 1
tmp(131) := x"8" & '0' & x"0C";	-- CEQ @12 	#Verifica se é 0
tmp(132) := x"7" & '0' & x"83";	-- JEQ @131 	#Se for 0, espera ser 1
tmp(133) := x"5" & '1' & x"FE";	-- STA @510 	#Reseta Key 1
tmp(134) := x"1" & '1' & x"40";	-- LDA @320 	#Le SW 0~7
tmp(135) := x"5" & '0' & x"09";	-- STA @9 	#Carrega valor SW 0~7 para limite milhar
tmp(136) := x"1" & '1' & x"61";	-- LDA @353 	#Le Key 1
tmp(137) := x"8" & '0' & x"0C";	-- CEQ @12 	#Verifica se é 0
tmp(138) := x"7" & '0' & x"89";	-- JEQ @137 	#Se for 0, espera ser 1
tmp(139) := x"5" & '1' & x"FE";	-- STA @510 	#Reseta Key 1
tmp(140) := x"1" & '1' & x"40";	-- LDA @320 	#Le SW 0~7
tmp(141) := x"5" & '0' & x"0A";	-- STA @10 	#Carrega valor SW 0~7 para limite dezena de milhar
tmp(142) := x"1" & '1' & x"61";	-- LDA @353 	#Le Key 1
tmp(143) := x"8" & '0' & x"0C";	-- CEQ @12 	#Verifica se é 0
tmp(144) := x"7" & '0' & x"8F";	-- JEQ @143 	#Se for 0, espera ser 1
tmp(145) := x"5" & '1' & x"FE";	-- STA @510 	#Reseta Key 1
tmp(146) := x"1" & '1' & x"40";	-- LDA @320 	#Le SW 0~7
tmp(147) := x"5" & '0' & x"0B";	-- STA @11 	#Carrega valor SW 0~7 para limite centena de milhar
tmp(148) := x"A" & '0' & x"00";	-- RET                                            	#END CONFIG LIMIT SUBROTINA
tmp(149) := x"0" & '0' & x"00";	-- NOP
tmp(150) := x"1" & '0' & x"00";	-- LDA @0 	#Le valor unidade                       
tmp(151) := x"8" & '0' & x"06";	-- CEQ @6 	#Verifica se é limite
tmp(152) := x"7" & '0' & x"9B";	-- JEQ @155 	#Se for limite continua o programa
tmp(153) := x"A" & '0' & x"00";	-- RET 	#Se nao for limite, retorna
tmp(154) := x"1" & '0' & x"01";	-- LDA @1 	#Le valor dezena
tmp(155) := x"8" & '0' & x"07";	-- CEQ @7 	#Verifica se é limite
tmp(156) := x"7" & '0' & x"9F";	-- JEQ @159 	#Se for limite continua o programa
tmp(157) := x"A" & '0' & x"00";	-- RET 	#Se nao for limite, retorna
tmp(158) := x"1" & '0' & x"02";	-- LDA @2 	#Le valor centena
tmp(159) := x"8" & '0' & x"08";	-- CEQ @8 	#Verifica se é limite
tmp(160) := x"7" & '0' & x"A3";	-- JEQ @163 	#Se for limite continua o programa
tmp(161) := x"A" & '0' & x"00";	-- RET 	#Se nao for limite, retorna
tmp(162) := x"1" & '0' & x"03";	-- LDA @3 	#Le valor milhar
tmp(163) := x"8" & '0' & x"09";	-- CEQ @9 	#Verifica se é limite
tmp(164) := x"7" & '0' & x"A7";	-- JEQ @167 	#Se for limite continua o programa
tmp(165) := x"A" & '0' & x"00";	-- RET 	#Se nao for limite, retorna
tmp(166) := x"1" & '0' & x"04";	-- LDA @4 	#Le valor dezena de milhar
tmp(167) := x"8" & '0' & x"0A";	-- CEQ @10 	#Verifica se é limite
tmp(168) := x"7" & '0' & x"AB";	-- JEQ @171 	#Se for limite continua o programa
tmp(169) := x"A" & '0' & x"00";	-- RET 	#Se nao for limite, retorna
tmp(170) := x"1" & '0' & x"05";	-- LDA @5 	#Le valor centena de milhar
tmp(171) := x"8" & '0' & x"0B";	-- CEQ @11 	#Verifica se é limite
tmp(172) := x"7" & '0' & x"AF";	-- JEQ @175 	#Se for limite aciona limite atingido
tmp(173) := x"A" & '0' & x"00";	-- RET 	#Se nao for limite, retorna
tmp(174) := x"4" & '0' & x"01";	-- LDI $1 	#Carrega 1
tmp(175) := x"5" & '0' & x"0F";	-- STA @15 	#Inibe contagem
tmp(176) := x"4" & '0' & x"0F";	-- LDI $15 	#Carrega 15
tmp(177) := x"5" & '1' & x"00";	-- STA @256 	#Ascende LED Limite atingido
tmp(178) := x"A" & '0' & x"00";	-- RET                                            	#END CHECK LIMIT SUBROTINA
tmp(179) := x"0" & '0' & x"00";	-- NOP
tmp(180) := x"5" & '1' & x"FD";	-- STA @509 	#Reseta RESET KEY                     
tmp(181) := x"4" & '0' & x"00";	-- LDI $0 	#Carrega 0
tmp(182) := x"5" & '0' & x"00";	-- STA @0 	#Zera unidade
tmp(183) := x"5" & '0' & x"01";	-- STA @1 	#Zera dezena
tmp(184) := x"5" & '0' & x"02";	-- STA @2 	#Zera centena
tmp(185) := x"5" & '0' & x"03";	-- STA @3 	#Zera milhar
tmp(186) := x"5" & '0' & x"04";	-- STA @4 	#Zera dezena de milhar
tmp(187) := x"5" & '0' & x"05";	-- STA @5 	#Zera centena de milhar
tmp(188) := x"5" & '0' & x"0F";	-- STA @15 	#Ativa contagem
tmp(189) := x"5" & '1' & x"02";	-- STA @258 	#Apaga LED Overflow
tmp(190) := x"4" & '0' & x"0F";	-- LDI $15 	#Carrega 15
tmp(191) := x"5" & '1' & x"00";	-- STA @256 	#Apaga LED Limite atingido
tmp(192) := x"A" & '0' & x"00";	-- RET                                           	#END RESET SUBROTINA
