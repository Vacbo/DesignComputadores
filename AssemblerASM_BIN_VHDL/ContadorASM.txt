LDI $0 # Carrega 0 acc                                    --INIT SETUP
STA @256 # Apaga LEDRs
STA @257
STA @258
STA @288 # Apaga HEXs
STA @289
STA @290
STA @291
STA @292
STA @293
STA @0 #Zera unidades
STA @1 #Zera dezenas
STA @2 #Zera centenas
STA @3 #Zera milhares
STA @4 #Zera dezenas de milhares
STA @5 #Zera centenas de milhares
STA @12 #Limite atingido unidade
STA @13 #Limite atingido dezena
STA @14 #Limite atingido centena
STA @15 #Limite atingido milhar
STA @16 #Limite atingido dezena de milhar
STA @17 #Limite atingido centena de milhar
STA @18 #Carrega 0 para comparacao
STA @21 #Inibe contagem
LDI $9 # Carrega 9 acc
STA @6 # Carrega 9 no limite unidades
STA @7 # Carrega 9 no limite dezenas
STA @8 # Carrega 9 no limite centenas
STA @9 # Carrega 9 no limite milhares
STA @10 # Carrega 9 no limite dezenas de milhares
STA @11 # Carrega 9 no limite centenas de milhares
LDI $1 # Carrega 1 acc
STA @19 # Carrega 1 para comparacao                       
LDI $10 # Carrega 10 acc
STA @20 # Carrega 10 para comparacao                      --END  SETUP
LDA @352 #Le Key 0                                        --MAIN LOOP
AND @19 #Mascara apenas o bit 1
CEQ @19 #Verifica se é 1
JEQ @41 #Se for 1, vai para subrotina
JMP @42 #Se não for 1, segue o programa
JSR @60 #Subrotina incrementa
JSR @110 #Subrotina atualiza HEX
LDA @353 #Le Key 1
AND @19 #Mascara apenas o bit 1
CEQ @19 #Verifica se é 1
JEQ @48 #Se for 1, vai para subrotina
JMP @49 #Se não for 1, segue o programa
JSR @123 #Subrotina config limit
JSR @158 #Subrotina check limit
LDA @356 #Le RESET KEY
AND @19 #Mascara apenas o bit 1
CEQ @19 #Verifica se é 1
JEQ @55 #Se for 1, vai para subrotina
JMP @36 #Se não for 1, retorna ao inicio 
JSR @subrotina5 #Subrotina reset
JMP @36 #Retorna ao inicio                              --END MAIN LOOP
NOP
STA @511 #Reseta Key 0                          --INIT INCREMENTA HEX SUBROTINA
LDA @21 #Carrega contagem inibida
CEQ @18 #Verifica se é 0
JEQ @65 #Se for 0, continua
RET #Se for 1, retorna
LDA @0 #Le valor unidade
ADD @19 #Incrementa unidade
CEQ @20 # Verifica se é 10
JEQ @70 #Se for 10, lidar com carry
RET
LDI $0 #Carrega 0
STA @0 #Zera unidade
LDA @1 #Le valor dezena
ADD @19 #Incrementa dezena
CEQ @20 # Verifica se é 10
JEQ @77 #Se for 10, lidar com carry
RET
LDI $0 #Carrega 0
STA @1 #Zera dezena
LDA @2 #Le valor centena
ADD @19 #Incrementa centena
CEQ @20 # Verifica se é 10
JEQ @84 #Se for 10, lidar com carry
RET
LDI $0 #Carrega 0
STA @2 #Zera centena
LDA @3 #Le valor milhar
ADD @19 #Incrementa milhar
CEQ @20 # Verifica se é 10
JEQ @91 #Se for 10, lidar com carry
RET
LDI $0 #Carrega 0
STA @3 #Zera milhar
LDA @4 #Le valor dezena de milhar
ADD @19 #Incrementa dezena de milhar
CEQ @20 # Verifica se é 10
JEQ @98 #Se for 10, lidar com carry
RET
LDI $0 #Carrega 0
STA @4 #Zera dezena de milhar
LDA @5 #Le valor centena de milhar
ADD @19 #Incrementa centena de milhar
CEQ @20 # Verifica se é 10
JEQ @105 #Se for 10, lidar com carry
RET
LDI $1 #Carrega 1
STA @258 #Ascende LED Overflow
STA @21 #Inibe contagem
RET                                             --END INCREMENTA HEX SUBROTINA
NOP
LDA @0 #Le valor unidade                        -- INIT ATUALIZA HEX SUBROTINA
STA @288 # Escreve valor unidade
LDA @1 #Le valor dezena
STA @289 #Escreve valor dezena
LDA @2 #Le valor centena
STA @290 #Escreve valor centena
LDA @3 #Le valor milhar
STA @291 #Escreve valor milhar
LDA @4 #Le valor dezena de milhar
STA @292 #Escreve valor dezena de milhar
LDA @5 #Le valor centena de milhar
STA @293  #Escreve valor centena de milhar
RET                                            -- END ATUALIZA HEX SUBROTINA
NOP
STA @510 #Reseta Key 1                          --INIT CONFIG LIMIT SUBROTINA
LDA @320 #Le SW 0~7
STA @6 #Carrega valor SW 0~7 para limite unidade
LDA @353 #Le Key 1
CEQ @18 #Verifica se é 0
JEQ @127 #Se for 0, espera ser 1
STA @510 #Reseta Key 1
LDA @320 #Le SW 0~7
STA @7 #Carrega valor SW 0~7 para limite dezena
LDA @353 #Le Key 1
CEQ @18 #Verifica se é 0
JEQ @133 #Se for 0, espera ser 1
STA @510 #Reseta Key 1
LDA @320 #Le SW 0~7
STA @8 #Carrega valor SW 0~7 para limite centena
LDA @353 #Le Key 1
CEQ @18 #Verifica se é 0
JEQ @139 #Se for 0, espera ser 1
STA @510 #Reseta Key 1
LDA @320 #Le SW 0~7
STA @9 #Carrega valor SW 0~7 para limite milhar
LDA @353 #Le Key 1
CEQ @18 #Verifica se é 0
JEQ @145 #Se for 0, espera ser 1
STA @510 #Reseta Key 1
LDA @320 #Le SW 0~7
STA @10 #Carrega valor SW 0~7 para limite dezena de milhar
LDA @353 #Le Key 1
CEQ @18 #Verifica se é 0
JEQ @151 #Se for 0, espera ser 1
STA @510 #Reseta Key 1
LDA @320 #Le SW 0~7
STA @11 #Carrega valor SW 0~7 para limite centena de milhar
RET                                            --END CONFIG LIMIT SUBROTINA
NOP
LDA @0 #Le valor unidade                       -- INIT CHECK LIMIT SUBROTINA
CEQ @6 #Verifica se é limite
JEQ @32 #Se for limite aciona limite atingido
JMP @34 #Se não for limite, segue o programa
LDA @18 #Carrega valor 1
STA @12 #Limite atingido unidade
LDA @1 #Le valor dezena
CEQ @7 #Verifica se é limite
JEQ @38 #Se for limite aciona limite atingido
JMP @40 #Se não for limite, segue o programa
LDA @18 #Carrega valor 1
STA @13 #Limite atingido dezena
LDA @2 #Le valor centena
CEQ @8 #Verifica se é limite
JEQ @44 #Se for limite aciona limite atingido
JMP @46 #Se não for limite, segue o programa
LDA @18 #Carrega valor 1
STA @14 #Limite atingido centena
LDA @3 #Le valor milhar
CEQ @9 #Verifica se é limite
JEQ @50 #Se for limite aciona limite atingido
JMP @52 #Se não for limite, segue o programa
LDA @18 #Carrega valor 1
STA @15 #Limite atingido milhar
LDA @4 #Le valor dezena de milhar
CEQ @10 #Verifica se é limite
JEQ @56 #Se for limite aciona limite atingido
JMP @58 #Se não for limite, segue o programa
LDA @18 #Carrega valor 1
STA @16 #Limite atingido dezena de milhar
LDA @5 #Le valor centena de milhar
CEQ @11 #Verifica se é limite
JEQ @62 #Se for limite aciona limite atingido
JMP @64 #Se não for limite, segue o programa
LDA @18 #Carrega valor 1
STA @17 #Limite atingido centena de milhar
RET                                          -- END CHECK LIMIT SUBROTINA