LDI $0 # Carrega 0 acc                                    #INIT SETUP
STA @256 # Apaga LEDRs
STA @257
STA @258
STA @288 # Apaga HEXs
STA @289
STA @290
STA @291
STA @292
STA @293
STA @0 #Zera unidades
STA @1 #Zera dezenas
STA @2 #Zera centenas
STA @3 #Zera milhares
STA @4 #Zera dezenas de milhares
STA @5 #Zera centenas de milhares
STA @12 #Carrega 0 para comparacao
STA @15 #Inibe contagem
LDI $9 # Carrega 9 acc
STA @6 # Carrega 9 no limite unidades
STA @7 # Carrega 9 no limite dezenas
STA @8 # Carrega 9 no limite centenas
STA @9 # Carrega 9 no limite milhares
STA @10 # Carrega 9 no limite dezenas de milhares
STA @11 # Carrega 9 no limite centenas de milhares
LDI $1 # Carrega 1 acc
STA @13 # Carrega 1 para comparacao                       
LDI $10 # Carrega 10 acc
STA @14 # Carrega 10 para comparacao                      #END  SETUP
LDA @352 #Le Key 0                                        #MAIN LOOP
AND @13 #Mascara apenas o bit 1
CEQ @13 #Verifica se é 1
JEQ @34 #Se for 1, vai para subrotina
JMP @35 #Se não for 1, segue o programa
JSR @51 #Subrotina incrementa
JSR @101 #Subrotina atualiza HEX
LDA @353 #Le Key 1
AND @13 #Mascara apenas o bit 1
CEQ @13 #Verifica se é 1
JEQ @41 #Se for 1, vai para subrotina
JMP @42 #Se não for 1, segue o programa
JSR @115 #Subrotina config limit
JSR @150 #Subrotina check limit
LDA @355 #Le RESET KEY
AND @13 #Mascara apenas o bit 1
CEQ @13 #Verifica se é 1
JEQ @48 #Se for 1, vai para subrotina
JMP @29 #Se não for 1, retorna ao inicio 
JSR @180 #Subrotina reset
JMP @29 #Retorna ao inicio                              #END MAIN LOOP
NOP
STA @511 #Reseta Key 0                          #INIT INCREMENTA HEX SUBROTINA
LDA @15 #Carrega contagem inibida
CEQ @12 #Verifica se é 0
JEQ @56 #Se for 0, continua
RET #Se for 1, retorna
LDA @0 #Le valor unidade
SOMA @13 #Incrementa unidade
CEQ @14 # Verifica se é 10
JEQ @61 #Se for 10, lidar com carry
RET
LDI $0 #Carrega 0
STA @0 #Zera unidade
LDA @1 #Le valor dezena
SOMA @13 #Incrementa dezena
CEQ @14 # Verifica se é 10
JEQ @68 #Se for 10, lidar com carry
RET
LDI $0 #Carrega 0
STA @1 #Zera dezena
LDA @2 #Le valor centena
SOMA @13 #Incrementa centena
CEQ @14 # Verifica se é 10
JEQ @75 #Se for 10, lidar com carry
RET
LDI $0 #Carrega 0
STA @2 #Zera centena
LDA @3 #Le valor milhar
SOMA @13 #Incrementa milhar
CEQ @14 # Verifica se é 10
JEQ @82 #Se for 10, lidar com carry
RET
LDI $0 #Carrega 0
STA @3 #Zera milhar
LDA @4 #Le valor dezena de milhar
SOMA @13 #Incrementa dezena de milhar
CEQ @14 # Verifica se é 10
JEQ @89 #Se for 10, lidar com carry
RET
LDI $0 #Carrega 0
STA @4 #Zera dezena de milhar
LDA @5 #Le valor centena de milhar
SOMA @13 #Incrementa centena de milhar
CEQ @14 # Verifica se é 10
JEQ @96 #Se for 10, lidar com carry
RET
LDI $1 #Carrega 1
STA @258 #Ascende LED Overflow
STA @15 #Inibe contagem
RET                                             #END INCREMENTA HEX SUBROTINA
NOP
LDA @0 #Le valor unidade                        #INIT ATUALIZA HEX SUBROTINA
STA @288 # Escreve valor unidade
LDA @1 #Le valor dezena
STA @289 #Escreve valor dezena
LDA @2 #Le valor centena
STA @290 #Escreve valor centena
LDA @3 #Le valor milhar
STA @291 #Escreve valor milhar
LDA @4 #Le valor dezena de milhar
STA @292 #Escreve valor dezena de milhar
LDA @5 #Le valor centena de milhar
STA @293  #Escreve valor centena de milhar
RET                                             #END ATUALIZA HEX SUBROTINA
NOP
STA @510 #Reseta Key 1                          #INIT CONFIG LIMIT SUBROTINA
LDA @320 #Le SW 0~7
STA @6 #Carrega valor SW 0~7 para limite unidade
LDA @353 #Le Key 1
CEQ @12 #Verifica se é 0
JEQ @118 #Se for 0, espera ser 1
STA @510 #Reseta Key 1
LDA @320 #Le SW 0~7
STA @7 #Carrega valor SW 0~7 para limite dezena
LDA @353 #Le Key 1
CEQ @12 #Verifica se é 0
JEQ @124 #Se for 0, espera ser 1
STA @510 #Reseta Key 1
LDA @320 #Le SW 0~7
STA @8 #Carrega valor SW 0~7 para limite centena
LDA @353 #Le Key 1
CEQ @12 #Verifica se é 0
JEQ @130 #Se for 0, espera ser 1
STA @510 #Reseta Key 1
LDA @320 #Le SW 0~7
STA @9 #Carrega valor SW 0~7 para limite milhar
LDA @353 #Le Key 1
CEQ @12 #Verifica se é 0
JEQ @136 #Se for 0, espera ser 1
STA @510 #Reseta Key 1
LDA @320 #Le SW 0~7
STA @10 #Carrega valor SW 0~7 para limite dezena de milhar
LDA @353 #Le Key 1
CEQ @12 #Verifica se é 0
JEQ @142 #Se for 0, espera ser 1
STA @510 #Reseta Key 1
LDA @320 #Le SW 0~7
STA @11 #Carrega valor SW 0~7 para limite centena de milhar
RET                                            #END CONFIG LIMIT SUBROTINA
NOP
LDA @0 #Le valor unidade                       #INIT CHECK LIMIT SUBROTINA
CEQ @6 #Verifica se é limite
JEQ @154 #Se for limite continua o programa
RET #Se nao for limite, retorna
LDA @1 #Le valor dezena
CEQ @7 #Verifica se é limite
JEQ @158 #Se for limite continua o programa
RET #Se nao for limite, retorna
LDA @2 #Le valor centena
CEQ @8 #Verifica se é limite
JEQ @162 #Se for limite continua o programa
RET #Se nao for limite, retorna
LDA @3 #Le valor milhar
CEQ @9 #Verifica se é limite
JEQ @166 #Se for limite continua o programa
RET #Se nao for limite, retorna
LDA @4 #Le valor dezena de milhar
CEQ @10 #Verifica se é limite
JEQ @170 #Se for limite continua o programa
RET #Se nao for limite, retorna
LDA @5 #Le valor centena de milhar
CEQ @11 #Verifica se é limite
JEQ @174 #Se for limite aciona limite atingido
RET #Se nao for limite, retorna
LDI $1 #Carrega 1
STA @15 #Inibe contagem
LDI $15 #Carrega 15
STA @256 #Ascende LED Limite atingido
RET                                           #END CHECK LIMIT SUBROTINA
NOP
STA @509 #Reseta RESET KEY                     #INIT RESET SUBROTINA
LDI $0 #Carrega 0
STA @0 #Zera unidade
STA @1 #Zera dezena
STA @2 #Zera centena
STA @3 #Zera milhar
STA @4 #Zera dezena de milhar
STA @5 #Zera centena de milhar
STA @15 #Ativa contagem
STA @258 #Apaga LED Overflow
LDI $15 #Carrega 15
STA @256 #Apaga LED Limite atingido
RET                                          #END RESET SUBROTINA